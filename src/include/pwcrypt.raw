<?php
  /* Copyright (c) 2002
   *      Michael Lestinsky. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. All advertising materials mentioning features or use of this software
   *    must display the following acknowledgement:
   *      This product includes software developed by Michael Lestinsky.
   *
   * THIS SOFTWARE IS PROVIDED BY MICHAEL LESTINSKY ``AS IS'' AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL MICHAEL LESTINSKY BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   */

  /**
   * Password-functions for the "Koch-Suite"
   *
   * $Id: pwcrypt.raw,v 1.3 2002/06/11 18:43:47 lestinsky Exp $
   * Editors: Please sort new functions alphabetically.
   *
   * @author Michael Lestinsky <michael@lestinsky.de>
   * @package Lib
   * @modulegroup General
   * @module pwcrypt.inc
   * @copyright Michael Lestinsky <michael@lestinsky.de>
   */


  /**
   * mk_crypted_pw () - create the encrypted password.
   * @param string $pw unencrypted password
   * @return string
   */
  function mk_crypted_pw ($pw) {
    if (test_md5_crypt() === true) {
      $salt = "\$1\$" . mk_rndstring(8);
    } else {
      // fallback to DES
      $salt = mk_rndstring(2);
    }

    return crypt($pw, $salt);
  }


  /**
   * Generate a custom-length random string.
   * @param int $len Stringlength of random string
   * @return string
   */
  function mk_rndstring ($len) {
    // Generiere einen zufaelligen String.
    $str = '';
    $randstr = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    srand ((double) microtime () * 1000000);
    for (; strlen($str) < $len;) {
      $chr = substr ($randstr, rand(0,61), 1);
      if (strpos($str, $chr) === false) {
        $str .= $chr;
      }
    }
    return $str;
  }


  /**     
   * Test if out crypt() is mp5-capable     
   * @return bool     
   */     
  function test_md5_crypt () {     
    $md5_check = '$1$Pi314$8NdgmoWHvMPgQOGw0BCCe0';     

    if (crypt('Passwort', '$1$Pi314') == $md5_check)     
      return true;     
    else     
      return false;     
  }     
?>
