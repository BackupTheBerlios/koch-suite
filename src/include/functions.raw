<?
  /* Functions for the "Koch-Suite" by
   * (c) Michael Lestinsky <michael@zaphod.rhein-neckar.de>, January 2001
   * $Id: functions.raw,v 1.41 2001/06/10 22:16:46 michael Exp $
   *
   * See ../LICENSE for the license of this code.
   */

  require "<%%PHP_LIBS%%>/output.inc";

  /* --- Functions --- */

  function get_line ($fh) {
    if ($line = fgets($fh, 1024)) {
      return preg_replace("/\r/", "", $line);
    } else {
      return false;
    }
  }

  function delete_menue ($mid) {
    /* delete a recipe from the database */
    $req = "select * from REZEPT where MENUE_ID = " . $mid;
    $result = mysql_db_query ($GLOBALS["DB_NAME"], $req);

    while ($r = mysql_fetch_array($result)) {
      $req_z = "delete from ZUTATEN where REZEPT_ID = " . $r["ID"];
      $result_z = mysql_db_query ($GLOBALS["DB_NAME"], $req_z);
    }

    $req = "delete from REZEPT where MENUE_ID = " . $mid;
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    $req = "delete from ANWEISUNG where MENUE_ID = " . $mid;
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    $req = "delete from KAT where MENUE_ID = " . $mid;
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    $req = "delete from MENUE where ID = " . $mid;
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);
  }


  function delete_unit_alias ($unit) {
    /* Delete all Aliases for a given Unit. */

    /* What's the unit id to be deleted? */

    $req = "select ID from EINHEITEN " .
           " where STRCMP(EINHEITEN.ABBREV, '" . addslashes($unit) . "') = 0";

    if (! $result = mysql_db_query($GLOBALS["DB_NAME"], $req)) {
      write_log("delete_unit_alias(): $req");
      write_log(mysql_error());
      return false;
    } else {
      if ($id = mysql_fetch_array($result)) {
           
        $req = "delete from EINHEITEN_ALIAS " .
               " where EID = " . $id["ID"];

        if (! $result = mysql_db_query($GLOBALS["DB_NAME"], $req)) {
          write_log("delete_unit_alias(): $req");
          write_log(mysql_error());
          return false;
        } else {
          return true;
          mysql_free_result($result);
        }
      } else {
        return false;
      }
    }
  }


  function exec_search ($str, $where, $param) {
    /* Actually parse what and where to search for and then
     * perform the proper searches.
     */

    $return          = array();
    $return_is_empty = true;

    /*
     * (future) Grammer:
     * split by 'AND', then split by 'OR' and finally lookout for 'NOT'
     * 'AND' is higher order then 'OR'.
     * i.e.: 'Muffins AND Choc OR Strawberry' searches for all Choclate or
     *       Strawberry-Muffins.
     *
     * current status: 'AND' only.
     */

    $and = split(" AND ", $str);
    foreach ($and as $this) {

      switch ($where) {
        case 'title':
          if ($param == 1) {
            $result = get_mid_by_name("");
          } else if (ereg("[a-z]", $param)) {
            $result = get_mid_by_name("$param", 1);
          } else {
            $result = get_mid_by_name("%$this%");
          }
          break;
        case 'cat':
          $result = get_mid_by_cat($this);
          break;
        case 'ingred':
          $result = get_mid_by_ingred($this);
          break;
      }

      /* Intersection with an empty array is empty. So we need to catch
       * this situation first. 
       */
      if (!$return_is_empty) {
        $return = array_intersect($return, $result);
      } else {
        $return = $result;
        $return_is_empty = false;
      }
    }

    /* We are done here, sort and return the result. */
    uasort($return, "cmp_menu");
    return $return;
  }


  function is_unit ($str) {
    // Test, whether a given string is a valid MM-Unit or not
    if ($alias = is_unit_alias($str)) {
      return $alias;
    } else {
      $str = addslashes($str);
      $req = "select ABBREV from EINHEITEN " .
             " where STRCMP(ABBREV, '$str') = 0 " .
             "    or RK_ABBREV = '$str' ".
             "   and MMUSE     = 'J'";
      $result = mysql_db_query($GLOBALS["DB_NAME"], $req);
      if (mysql_num_rows($result) == 1) {
        $return = mysql_fetch_array($result);
        return $return[0];
      } else {
        return false;
      }
      mysql_free_result($result);
    }
  }


  function is_unit_alias ($str) {
    // Test, whether a given string is a valid unit-alias. 
    // Return a valid MM-unit or false.

    $req = "select EINHEITEN.ABBREV " .
           "  from EINHEITEN, EINHEITEN_ALIAS " .
           " where EINHEITEN.ID = EINHEITEN_ALIAS.EID " .
           "   and EINHEITEN_ALIAS.TEXT = '" . addslashes($str) . "'";
    if ($result = mysql_db_query($GLOBALS["DB_NAME"], $req)
        and mysql_affected_rows() == 1) {
      $unit = mysql_fetch_row($result);
      return $unit[0]; 
    } else {
      return false;
    }
    mysql_free_result($result);
  }


  function get_units () {
    /* Gib Informationen zu den Einheiten aus. */

    $all = array();
    $req = "select * from EINHEITEN " .
           " where MMUSE != 'N' " .
           " order by ABBREV";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    while ($unit = mysql_fetch_array($result)) {
      $a = get_unit_aliases ($unit["ABBREV"]);
      array_push ($all, array("unit"    => $unit,
                              "aliases" => $a));
    }
    return $all;
  }

 
  function get_unit_aliases ($id) {
    /* Get a List of defined aliases of unit-id $id */
    $a = array();
    $req_alias = "select EINHEITEN_ALIAS.TEXT " .
                 "  from EINHEITEN_ALIAS, EINHEITEN " .
                 " where EINHEITEN_ALIAS.EID = EINHEITEN.ID " .
                 "   and STRCMP(EINHEITEN.ABBREV, '$id') = 0 " .
                 " order by TEXT";
    if (!$result_alias = mysql_db_query($GLOBALS["DB_NAME"], $req_alias)) {
      write_log ($req_alias);
      write_log (mysql_error());
      return false;
    } else {
      while ($alias = mysql_fetch_row($result_alias)) {
        array_push($a, $alias[0]);
      }
    }

    return $a;
  }
 


  function mk_unit_alias ($unit, $alias) {
    /* Create a list of Aliases for a given unit.
     * $unit is the MM-Style abbreviation for the unit and 
     * $alias (string) is the alias to be created.
     * returns > 0 on Success, 0 if already defined and < 0 on error.
     */

    $alias = addslashes($alias);
    $unit  = addslashes($unit);

    /* Let's start checking if that alias is already defined somewhere
     * else or even a valid unitname and stop then:
     */
    if (is_unit($alias)) {
      return 0;
    } else {
      /* Alias is undefined. That's fine, lets proceed. */

      /* What's the ID of the unit? */
      $req = "select ID from EINHEITEN where STRCMP('$unit', ABBREV) = 0";
      if ($result = mysql_db_query($GLOBALS["DB_NAME"], $req)) {

        /* we have the ID, do the insert: */

        $id = mysql_fetch_array($result);
        $req = "insert into EINHEITEN_ALIAS " . 
               " values (0, " . $id["ID"] . ", '$alias')";

        if (! $result = mysql_db_query($GLOBALS["DB_NAME"], $req)) {

          /* Something's wrong. */
          write_log ($req);
          write_log (mysql_error());
          return -2;

        } else {

          /* All is fine. Return something >0. */
          return 1;

        }
      } else {
        return -1;
      }
    }

  }


  function &parse_recipe($fd, $flavor="MM") {
    /* Versuche aus dem Filehandle $fd ein Rezept 
     * im Format $flavor ("MM" oder "RK") 
     * zu extrahieren.
     * Gib eine Referenz auf das Ergebnis zurück.
     */
    $zutaten        = array();
    $bar            = 0;
    $instruction    = "";
    if ($flavor == "MM") {
      $zutaten_header = "/^(-{5}|M{5})-*(.*)[-=@]*$/i";
      $rezept_ende    = "/^(-{5}|M{5})[@-]*$/";
      $title_pattern  = "Title:";
      $cat_pattern    = "Categories:";
      $yield_pattern  = "(Yield|Servings):";
    } else if ($flavor == "RK") {
      $zutaten_header = "/^={6,}.*=*$/";
      $rezept_ende    = "/^={5}$/";
      $title_pattern  = "Titel:";
      $cat_pattern    = "Kategorien:";
      $yield_pattern  = "(Menge):";
    } else {
      /* wrong flavor. */
      return false;
    }

    $br_lock        = 1;

    while ($line = get_line($fd)) {
      if (preg_match($rezept_ende, $line)) {
        /* Found the end of the recipe */
        break;
      } else {

        if ($seen_title == 0 and 
            ereg("$title_pattern(.*)", $line, $foo)) {
          // Titel:

          $title = trim($foo[1]);
          $seen_title = 1;

        } else if ($seen_categories != 1 and 
                   ereg("$cat_pattern(.*)", $line, $foo)) {
          // Kategorie:

          $categories = split(", *", trim($foo[1]));
          $seen_categories = 1;

          while(isset($categories[$bar])) {
            $categories[$bar] = trim($categories[$bar]);
            $bar++;
          }

        } else if ($seen_yield != 1 and 
                   ereg("$yield_pattern(.*)", $line, $foo)) {
          // Menge:

          $yield = trim($foo[2]);
          $seen_yield = 1;

        } else if (preg_match("/^ *$/", $line) and $seen_ingr == 0) {
          # Skip this line

        } else if (preg_match($zutaten_header, $line, $foo)) {

          $search  = array ("/^[=-]{5,}/",     "/[=-]{5,}$/", 
                            "/^M{5}[-=]*/", "/[-@=]*$/");

          $replace = array ("", "", "", "");

          array_push ($zutaten, 
               array("title" => preg_replace($search, $replace, trim($line)),
                     "ingredients" => getingr($fd, $flavor)));
          $seen_ingr = 1;

        } else if ($seen_title      == 1 and 
                   $seen_categories == 1 and 
                   $seen_yield      == 1 and
                   $seen_instr      == 0 and
                   $seen_ingr       == 0 ) {
          /* lets look for the ingredients */ 

          $len = strlen($line);
          fseek($fd, -$len, SEEK_CUR);
          if (($x = getingr($fd, $flavor)) > 0) {
            array_push ($zutaten,
                      array("title" => "", 
                            "ingredients" => $x));
          }
          $seen_ingr = 1;

        } else {
          // Anweisungen:

          $seen_instr = 1;
          $line = trim($line);

          if ( $line == "" ) {
            if ( $br_lock == 0 ) {
              $instruction .= "<p> ";
            }
            $br_lock = 1;
          } else {
            if ( preg_match("/^:.*$/", $line) and $br_lock == 0 ) {
              $instruction .= "<br> $line ";
            } else {
              $instruction .= "$line ";
            }
            $br_lock = 0;
          }
        }
      }
    }

    /* Strip leading and trailing <p>- and <br>-tags */
    $search = array("/^(<(p|br)>\s*)*/", "/\s*(<(p|br)>\s*)*$/");
    $replace = array("", "");
    $instruction =  preg_replace($search, $replace, $instruction);

    return array("title"     => $title,
                 "category"  => $categories,
                 "yield"     => $yield,
                 "zutaten"   => $zutaten,
                 "anleitung" => $instruction);
  }


  function parse_ingredient($line, $flavor="MM") {
    if ($flavor == "MM") {
      /* Lese eine MM-Rezeptzeile */
      if (ereg("([ 0-9\.\/]{7}) (..) (.*)", $line, $foo)) {
        $quant = trim($foo[1]);
        $unit = trim($foo[2]);
        $text = trim($foo[3]);
      }
    } elseif ($flavor == "RK") {
      /* Lese eine RK-Rezept-Zeile */

      if (ereg("([ 0-9\.\/]{7}) (.{8}) (.*)", $line, $foo)) {
        $quant = trim($foo[1]);
        $rawunit = trim($foo[2]);
        $text = trim($foo[3]);

        $req = "select ABBREV from EINHEITEN " .
               " where RK_ABBREV = '$rawunit'" .
               "   and MMUSE = 'J' ";
        $res = mysql_db_query($GLOBALS["DB_NAME"], $req);

        if ($res != 0 and $mmunit = mysql_fetch_row($res)) {
          $unit = $mmunit[0];
        } else {
          $unit = '';
          $text = $rawunit . " " . $text;
        }
      }
    }

    if (isset($quant) and isset($unit) and isset($text)) {
      /* Ok, wir haben eine gueltige Zeile gelesen. */
      if ($quant != '') {
        $quant = fraction_to_real($quant);
      }

      // Es gibt 2 verschiedene Stiele für verlängerte Zeilen.
      // "-bla" und "-- bla":
      $text = preg_replace("/^-+\s*/", "-- ", $text);

      return array("quant"  => $quant,
                   "unit"   => $unit,
                   "ingred" => $text);
    } else {
      /* Sorry, keine gültige Zeile */
      return false;
    }
  }


  function fraction_to_real ($quant) {
    /* Convert fractions to real numbers. */

    $quant = preg_replace("/,/", ".", $quant);
    $quant = preg_replace("/(\d+\/\d+)/", "+\\1", $quant);
    $quant = eval("return $quant;");

    return $quant;
  }


  function getingr ($fd, $flavor="MM") {
    /* read the ingredients 
     * return a 2-dim Array $a[count][ingr-spec]
     * where count is a plain integer-counter, specifying more or less
     * the linenumber of the ingredient and ingr-spec is one of "quant",
     * "unit" or "ingred".
     */

    $a = array();

    while ($line = get_line($fd)) {
      $len = strlen($line);
      #if (preg_match("/^\s*$/", $line))
      #  break;
      if ($b = parse_ingredient($line, $flavor)) {
        array_push ($a, $b);
      } else {
        fseek($fd, -$len, SEEK_CUR);
        break;
      }
    }
    return $a;
  }


  function write_db ($rezept) {
    /* Write a recipe into the database. For the layout of the database
     * see Documentation/init_db.sql
     */

    global $DB_NAME;

    $req = "insert into MENUE values ( " .
          "  0, " .
          "  '" . addslashes($rezept["yield"]) . "', " .
          "  '" . addslashes($rezept["title"]) . "' " .
          "  ) ";
    $result = mysql_db_query($DB_NAME, $req);
    $mid = mysql_insert_id();

    foreach ($rezept["zutaten"] as $z) {
      $req = "insert into REZEPT values ( " .
             "  0, " .
             "  '$mid', " .
             "  '" . addslashes($z["title"]) . "' " .
             " ) ";
      $result = mysql_db_query($DB_NAME, $req);
      $rid = mysql_insert_id();

      foreach ($z["ingredients"] as $i) {
        $req = "insert into ZUTATEN values ( " .
               "  0, " .
               "  '" . addslashes($i["quant"]) . "', " .
               "  '" . addslashes($i["unit"])  . "', " .
               "  '" . addslashes($i["ingred"]) ."', " .
               "  '$rid' ".
               " ) ";
        $result = mysql_db_query($DB_NAME, $req);
      }
    }
    $req = "insert into ANWEISUNG values ( " .
           "  0, " .
           "  '" . addslashes($rezept["anleitung"]) . "', " .
           "  '$mid' " .
           " ) ";
    $result = mysql_db_query($DB_NAME, $req);

    foreach ($rezept["category"] as $cat) {
      $req = "select * from KATEGORIE where TEXT = '$cat'";
      $result = mysql_db_query($DB_NAME, $req);
      if ($r = mysql_fetch_array($result)) {
        $cid = $r["ID"];
      } else {
        $req = "insert into KATEGORIE values ( " .
               "  0, " .
               "  '" . addslashes($cat) . "' " .
               " ) ";
        $result = mysql_db_query($DB_NAME, $req);
        $cid = mysql_insert_id();
      }

      $req = "insert into KAT values ( " .
             "  0, " . 
             "  '$cid', " .
             "  '$mid'  " .
             " ) ";
      $result = mysql_db_query($DB_NAME, $req);
    }
  }


  function get_menu_by_mid ($mid) {
    /* Contruct the menu-array */

    $req = "select * from MENUE where ID = '$mid'";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    $r = mysql_fetch_array($result);

    return array("title" => stripslashes($r["TITEL"]),
                 "yield" => stripslashes($r["PORTIONEN"]),
                 "category" => get_category_by_mid($mid),
                 "zutaten" => get_recipe_by_mid($mid),
                 "anleitung" => get_instructions_by_mid($mid));
  }


  function get_recipe_by_mid ($mid) {
    /* */
    $a = array();

    $req = "select * from REZEPT where MENUE_ID = '$mid' order by ID asc";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    while ($r = mysql_fetch_array($result)) {
      array_push($a, array("title" => stripslashes($r["TITEL"]),
                                "ingredients" => get_ingr_by_rid($r["ID"])));
    }
    return $a;
  }


  function get_ingr_by_rid ($rid) {
    /* return an array with all the ingredients, belonging to an "Rezept" */
    $a = array();

    $req = "select * from ZUTATEN where REZEPT_ID = '$rid' order by ID asc";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    while($r = mysql_fetch_array($result)) {
      array_push($a, array("quant" => stripslashes($r["MENGE"]),
                                "unit"  => stripslashes($r["EINHEIT"]),
                                "ingred" => stripslashes($r["TEXT"])));
    }
    return $a;
  }


  function get_category_by_mid ($mid) {
    $a = array();

    $req = "select * from KAT where MENUE_ID = '$mid'";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    while ($r = mysql_fetch_array($result)) {
      $req_1 = "select * from KATEGORIE where ID = " . $r["KATEGORIE_ID"];
      $res_1 = mysql_db_query($GLOBALS["DB_NAME"], $req_1);

      $f = mysql_fetch_array($res_1);

      array_push($a, stripslashes($f["TEXT"]));
    }
    return $a;
  }


  function get_instructions_by_mid($mid) {
    $req = "select * from ANWEISUNG where MENUE_ID = '$mid'";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    $f = mysql_fetch_array($result);

    return stripslashes($f["TEXT"]);
  }


  function get_categories() {
    /* returns an array containing all available categories */
    $a = array();
    $req = "select * from KATEGORIE order by TEXT" ;
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    while ($c = mysql_fetch_array($result)) {
      array_push($a, stripslashes($c["TEXT"]));
    }

    return $a;
  }


  function get_mid_by_name($name, $first_char=0) {
    /* Search the database for $name in the menu-title */
    $a = array();
    if ($first_char==1) {
      $search = "$name%" ;
    } else {
      $search = "%$name%";
    }
    $req = "select * from MENUE where TITEL like '$search' order by TITEL asc";
    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);

    write_log ($req);

    while ($r = @mysql_fetch_array($result)) {
      array_push($a, array("id"    => stripslashes($r["ID"]),
                           "title" => stripslashes($r["TITEL"])));
    }

    return $a;
  }


  function get_mid_by_ingred($ingred) {
    /* Search the database for a menu containing a special ingredient
     * "ingred". 
     * Returns "0" if none found, an array of an associative arrays
     * ("ID", "PORTIONEN", "TITEL") otherwise.
     */

    $m = array();

    $req = "select distinct MENUE.ID, MENUE.TITEL " .
           "  from MENUE, REZEPT, ZUTATEN " .
           " where MENUE.ID = REZEPT.MENUE_ID " .
           "   and REZEPT.ID = ZUTATEN.REZEPT_ID " .
           "   and ZUTATEN.TEXT like '%" . addslashes($ingred) . "%'";

    $result = mysql_db_query($GLOBALS["DB_NAME"], $req);
    while ($z = mysql_fetch_array($result)) {
      array_push ($m, array("id"    => $z["ID"], 
                            "title" => $z["TITEL"]) );
    }

    return $m;
  }


  function get_mid_by_cat ($cat) {
    /* get all menus with category $cat */

    $a          = array();

    $req = "select distinct MENUE.TITEL, MENUE.ID " .
           "  from MENUE, KAT, KATEGORIE " .
           " where MENUE.ID = KAT.MENUE_ID " .
           "   and KAT.KATEGORIE_ID = KATEGORIE.ID " .
           "   and KATEGORIE.TEXT = '$cat'" ;

    if ($res = mysql_db_query($GLOBALS["DB_NAME"], $req)) {
      while ($m = mysql_fetch_array($res)) {
        array_push($a, array("id"    => stripslashes($m["ID"]), 
                             "title" => stripslashes($m["TITEL"]) ));
      }
      return $a;
    } else {
      return false;
    }
  }


  function cmp_menu ($a, $b) {
    /* Custom comparisson-function:
     * compare two menu-ref's by their title.
     */
    return strcmp($a["title"], $b["title"]);
  }
?>
