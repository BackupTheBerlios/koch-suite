#!<%%PHP%%> <%%PHP_OPTS%%>
<?php
  /* Copyright (c) 2000-2006
   *      Michael Lestinsky. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. All advertising materials mentioning features or use of this software
   *    must display the following acknowledgement:
   *      This product includes software developed by Michael Lestinsky.
   *
   * THIS SOFTWARE IS PROVIDED BY MICHAEL LESTINSKY ``AS IS'' AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL MICHAEL LESTINSKY BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   */

  /*
   * $Id: mmimport.raw,v 1.37 2008/11/29 01:34:04 lestinsky Exp $
   * Import mealmaster-formated recipes into the "Koch-Suite".
   *
   * See the bundled file "LICENCE" for the licence of this script.
   */

  require_once "<%%PHP_LIBS%%>/setup.inc";
  require "<%%PHP_LIBS%%>/functions.inc";
  require "<%%PHP_LIBS%%>/parser.inc";
  require "<%%PHP_LIBS%%>/file.inc";
  require "<%%PHP_LIBS%%>/lang.inc";

  /* Disable Timelimit. We have a controlling tty here, so this is safe. */
  set_time_limit(0);

  if (isset($_SERVER['argc']) and !isset($argc))
    $argc = $_SERVER["argc"];
  if (isset($_SERVER['argv']) and !isset($argv))
    $argv = $_SERVER["argv"];

  $opt_test = 0;
  $opt_test_printmm = 0;
  $opt_test_printrk = 0;
  $opt_cat = false;

  $new_cat = false; // Ignore unknown categories by default.
  $ignore_unknown_mmext = false; // Ignore optional fields, that are 
                                 // unknown to our database format.
  $force_dupes = false;
  
  $help = <<<EOD
Usage: $argv[0] [-t | --test [-mm]] [-c cat,cat,...] [-C | --import-new-cat]
              [-D | --force-dupes] [-h | --help]

     -t --test   test the parser.  Do not import the recipe, but rather refor-
                 mat it into plain ascii.  Output goes to STDOUT.

     -mm         Reformat parser output to Meal-Master format. This makes
                 sense only in conjunction with --test

     -c cat,cat,...
                 Add these category-entries to the recipe.

     -C --import-new-cat
                 Don't ignore categories which are unknown to the database.
                 This is disabled by default.

     -D --force-dupes
                 Force import of recipes which are considered duplicates.

     -h --help   Show usage and exit.

EOD;
  
  
  /* Open filedescriptors for the STD-channels */
  $stdin  = fopen("php://stdin", "r");
  $stdout = fopen("php://stdout", "w");
  $stderr = fopen("php://stderr", "w");

  /* parse arguments */
  for ($i = 1; $i < $argc; $i++) {
    switch ($argv[$i]) {
        case '-t':
        case '--test':
              $opt_test++;
              break;

        case '-mm':
              $opt_test_printmm++;
              break;

        case '-rk':
	      $opt_test_printrk++;
	      break;
      
        case '-c':
              if (++$i < $argc) {
                $opt_cat = split(',', $argv[$i]);
              } else {
                fputs($stderr, "$argv[0]: invalid option -- " . preg_replace('/^-*/', '', $argv[$i]) . "\n");
                exit();
              }
              break;

        case '-C':
	case '--import-new-cat':
             $new_cat = true;
             break;

	case '-D':
	case '--force-dupes':
	     $force_dupes = true;
	     break;

        case '-i':
        case '--ignore-unknown-mmext':
             $ignore_unknown_mmext = true;
             break;

        default:
              fputs($stderr, "$argv[0]: ignoring invalid option -- " . preg_replace('/^-*/', '', $argv[$i]) . "\n");
	      
        case '--help':
        case '-h':
              fputs($stderr, $help);
              exit();
    }
  }

  /* --- Main --- */

  /* Read input from stdin and return filehandle on normalized file */

  $tempfile = new File;
  if ($tempfile->WriteOpen()) {
    while ($line = fgets($stdin, 4096)) {
      $tempfile->WriteLine($line);
    }
    $tempfile->Close();
  }

  # Reopen for reading
  $tempfile->ReadOpen();

  while ($line = $tempfile->ReadLine()) {

    /* Is the line the start of a new recipe? */
    if (eregi("(-{5}|M{5}).*Meal-Master.*", $line)) { 
      /* parse the recipe */
      $rezept =& parse_recipe($tempfile, $ignore_unknown_mmext, RECIPE_MM);
    } else if (eregi("(={10}).*REZKONV.*", $line)) {
      $rezept =& parse_recipe($tempfile, $ignore_unknown_mmext, RECIPE_RK);
    }

    if (isset($rezept)) {
      
      if ($opt_cat)
        $rezept['category'] = array_merge($opt_cat, $rezept['category']) ;
      
      if ($opt_test) {
        /* Parse the recipe, but don't write it to the database.
         * Main purpose: parser-testing
         */
        if ($opt_test_printmm) {
          fputs($stdout, mmexport($rezept));
        } else if ($opt_test_printrk) {
          fputs($stdout, rkexport($rezept));
        } else {
          fputs($stdout, format_recipe($rezept));
          fputs($stdout, "==========\n");
        }
      } else {
	if ( $force_dupes or ! recipe_dupe($rezept['hash'])) {
          write_db($rezept, 0, $new_cat);
          if (strlen($notice) > 0) {
            fputs($stderr, sprintf("mmimport: %s", $notice));
            $notice = '';
          }
        } else {
          fputs($stderr, 'mmimport: "' . $rezept["title"] . "\" is already in database.\n");
        }
      }
      unset ($rezept);
    }
  }

  /* Close open files */

  $tempfile->CloseRM();

  /* --- End --- */
?>
