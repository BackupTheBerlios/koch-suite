<?php
  /* Copyright (c) 2001
   *      Michael Lestinsky. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. All advertising materials mentioning features or use of this software
   *    must display the following acknowledgement:
   *      This product includes software developed by Michael Lestinsky.
   *
   * THIS SOFTWARE IS PROVIDED BY MICHAEL LESTINSKY ``AS IS'' AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL MICHAEL LESTINSKY BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   */


  if (isset($HTTP_POST_VARS["FORM_USERNAME"])) 
    $FORM_USERNAME = $HTTP_POST_VARS["FORM_USERNAME"];
  if (isset($HTTP_POST_VARS["FORM_PASSWORD"]))
    $FORM_PASSWORD = $HTTP_POST_VARS["FORM_PASSWORD"];


  require_once "<%%ETC_PREFIX%%>/koch-suite.inc";
  require_once "<%%PHP_LIBS%%>/functions.inc";
  require_once "<%%PHP_LIBS%%>/pwcrypt.inc";


  /**
   * Base Authentication-Module for the Koch-Suite
   *
   * $Id: auth.raw,v 1.9 2002/02/12 18:40:35 lestinsky Exp $
   * The user is identified by an array $user.
   *
   * @author Michael Lestinsky <michael@lestinsky.de>
   * @package Lib
   * @modulegroup Authenication
   * @module auth.inc
   * @copyright Michael Lestinsky <michael@lestinsky.de>
   */


  if (!session_start()) 
    die ("Cannot start the session.");
  session_register("user");


  /**
   * PHP 4.0.5/6 are somewhat broken. Since 4.1.0 there is a
   * better attempt to solve this problem.
   * So catch this difference here. Verified to work on 4.0.7RC3
   */
  if (isset($_SESSION["user"])) {
    // PHP 4.1.0 and later...
    $USER_S =& $_SESSION["user"];
  } else {
    if (ini_get("register_globals") != false) {
      // register_globals is "On".
      $USER_S =& $user;
    } else {
      // register_globals is "Off".
      $USER_S =& $HTTP_SESSION_VARS["user"];
    }
  }


  /**
   * auth($level) - Authenticate the User against the page.
   * This function returns true if the user has at least $level
   * permissions and false otherwise.
   *
   * @param  string $level minimum usertype required for this.
   * @return bool
   */
  function auth ($level = READ) {
    global $USER_S, $FORM_USERNAME, $FORM_PASSWORD;

    /* do we want authentication? Test the global settings. Operations of
     * the level $GLOBALS["AUTH_LEVEL"] or higher require the user to be
     * authenticated. 
     */
    if ($GLOBALS["AUTH_LEVEL"] <= $level) {
      /* yeah: */

      if (!empty($USER_S)) {
        /* User already authenticated himself. -> go.
         * Trust the values we have saved in the $user-sessionvariable.
         */
        return true;

      } else {

        /* We need to fetch $username and $password from somewhere. */
        if (!isset($FORM_USERNAME) and !isset($FORM_PASSWORD)) 
          auth_loginform();

        /* We've got a username and a password -> check them. */
        $USER_S = verify_authdata($FORM_USERNAME, $FORM_PASSWORD);
        return true;

      }
    } else {
      /* Authentication is not required.
       * but perform it anyways, if requested by user 
       */
      if (isset($FORM_USERNAME) and isset($FORM_PASSWORD)) {
        verify_authdata($FORM_USERNAME, $FORM_PASSWORD);
      } else {
        return true;
      }
    }
  }


  /**
   * Do Database-based authentication.
   *
   * That means: we need a table 'usertable':
   * CREATE TABLE usertable (
   *   username varchar(20) NOT NULL default '',
   *   usertype varchar(20) default NULL,
   *   password varchar(255) default NULL,
   *   PRIMARY KEY  (username)
   * )
   *
   * @param  string $username
   * @param  string $password
   * @return array $user
   */
  function verify_authdata ($username, $password) {
    if (!empty($username) and !empty($password)) {

      $req = "select password, usertype from usertable " .
             " where username = '$username' ";

      if (($result = DB_query($req)) and ($result->numRows() == 1)) {
        // There is such a user, verify his password

        $row = $result->fetchRow();
        $crypted_passwd = $row["password"];

        if (($salt = substr($crypted_passwd, 0, 2)) != '$1')  {
          // DES-Password

          if (crypt($password, $salt) == $crypted_passwd) {
            // Valid
            $return = array("username" => $username, 
                            "usertype" => $row["usertype"]);
          } else {
            // Go away.
            $return = false;
          }
        } else {
          // MD5-Password

          /* extract the salt */
          $a = explode("$", $crypted_passwd);
          $salt = $a[2];

          if (crypt($password, "\$1\$$salt") == $crypted_passwd) {
            // Valid
            $return = array("username" => $username, 
                            "usertype" => $row["usertype"]);
          } else {
            $return = false;
          }
        }

        if ($return != false) {
          return $return;
        } else {
          session_destroy();
          die ("Authentication failed.\n");
        }

      } else {
        // Go away.
        session_destroy();
        die ("Authentication failed.\n");
      }
    } else {
      // Go away.
      session_destroy();
      die ("Username and password must not be empty.\n");
    }
  } 


  /**
   * Display the loginform
   * @return void
   */
  function auth_loginform() {
    global $HTTP_SERVER_VARS, $goto;
    include "<%%PHP_LIBS%%>/loginform.inc";
  }


  /**
   * Change the passwords in the database.
   */
  function update_passwd ($username, $opasswd, $passwd) {
    $cpwd = mk_crypted_pw($passwd);
    $req = "update usertable set password = '$cpwd' " .
           " where username = '$username' ";

    $result = DB_query($req);
  }

?>
