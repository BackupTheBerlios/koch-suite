<?php
  /* Copyright (c) 2002
   *      Michael Lestinsky. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. All advertising materials mentioning features or use of this software
   *    must display the following acknowledgement:
   *      This product includes software developed by Michael Lestinsky.
   *
   * THIS SOFTWARE IS PROVIDED BY MICHAEL LESTINSKY ``AS IS'' AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL MICHAEL LESTINSKY BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   */

  /**
   * Functions for the "Koch-Suite"
   *
   * $Id: functions.raw,v 1.79 2002/07/03 16:31:20 lestinsky Exp $
   * Editors: Please sort new functions alphabetically.
   *
   * @author Michael Lestinsky <michael@lestinsky.de>
   * @package Lib
   * @modulegroup General
   * @module functions.inc
   * @copyright Michael Lestinsky <michael@lestinsky.de>
   */

  require "<%%PHP_LIBS%%>/output.inc";

  /* --- Functions --- */


  /**
   * Compare two recipe-references by their title
   *
   * @param  array $a
   * @param  array $b
   * @return int   $result See strcmp().
   */
  function cmp_menu ($a, $b) {
    return strcasecmp($a["title"], $b["title"]);
  }


  /**
   * Return an valid SQL-string to perform an case-sensitive stringcomparison.
   *
   * @param  string $str1 column-title
   * @param  string $str2 value
   * @return string $return SQL-substring
   */
  function DB_casecomp ($str1, $str2) {
    global $DB_STYLE;

    $str2 = addslashes($str2);

    switch ($DB_STYLE) {
      case DB_MYSQL:
        $return = " STRCMP($str1, '$str2') = 0 ";
        break;
      case DB_PGSQL:
      default:
        $return = " $str1 = '$str2' ";
        break;
    }
    return $return;
  }

  /**
   * Return an valid SQL-string to perform an case-insensitive LIKE comparison
   *
   * @author Michael Bussmann <bus@mb-net.net>
   * @param  string $str1 column-title
   * @param  string $str2 value
   * @return string $return SQL-substring
   */
  function DB_ilike ($str1, $str2) {
    global $DB_STYLE;

    $str2 = addslashes($str2);

    switch ($DB_STYLE) {
      case DB_MYSQL:
        $return = " $str1 LIKE '$str2' ";
        break;
      case DB_PGSQL:
      default:
        $str2 = strtoupper($str2);
        $return = " UPPER($str1) LIKE '$str2' ";
        break;
    }
    return $return;
  }


  /**
   * Close database-connection
   *
   * @author Michael Bussmann <bus@mb-net.net>
   * return void
   */
  function db_disconnect() { 
    global $db;

    write_log("Closing connection to DBMS");
    $db->disconnect();
  } 


  /**
   * Perform SQL-Query
   *
   * @author Michael Bussmann <bus@mb-net.net>
   * @param  string $query  SQL-Query String
   * @return int    $result Result-Identifier
   */
  function DB_query($query) {
    global $db;

    write_log("SQL: $query");
    $result=$db->query($query);

    if (DB::isError($result)) {
      write_log('SQL error: ' . $result->getMessage());
      die('SQL error: ' . $result->getMessage());
    }

    if ($result === DB_OK) {
      return true;
    } else {
      return($result);
    }
  }


  /**
   * Delete a recipe from the database 
   *
   * @param  int  $mid Menu-ID
   * @return void
   */
  function delete_menue ($mid) {
    $req = "select id from REZEPT where MENUE_ID = " . $mid;
    $result = DB_query($req);

    while ($r = $result->fetchRow()) {
      $req_z = "delete from ZUTATEN where REZEPT_ID = " . $r["id"];
      $result_z = DB_query($req_z);
    }
    $result->free();

    $req = "delete from REZEPT where MENUE_ID = " . $mid;
    $result = DB_query($req);

    $req = "delete from ANWEISUNG where MENUE_ID = " . $mid;
    $result = DB_query($req);

    $req = "delete from KAT where MENUE_ID = " . $mid;
    $result = DB_query($req);

    $req = "delete from MENUE where ID = " . $mid;
    $result = DB_query($req);

    $req = "delete from menu_meta where mid = " . $mid;
    $result = DB_query($req);
  }


  /**
   * Delete all Aliases for a given Unit. 
   *
   * @param string $unit MM-unitname
   * @return bool
   */
  function delete_unit_alias ($unit) {

    /* What's the unit id to be deleted? */

    $req = "select id from EINHEITEN " .
           " where " . DB_casecomp("EINHEITEN.ABBREV", $unit);

    if (! $result = DB_query($req)) {
      return false;
    } else {
      if ($id = $result->fetchRow()) {
           
        $result->free();
        $req = "delete from EINHEITEN_ALIAS where EID = " . $id["id"];

        $result = DB_query($req);
        return true;
      } else {
        return false;
      }
    }
  }


  /**
   * Perform the search.
   *
   * @param  string  $str    Searchstring provided by the user
   * @param  string  $where  Where to search (Categories, Titles, Ingredients?)
   * @param  string  $param  Either 1 or [a-z].
   * @return array   $return 
   */
  function exec_search ($str, $where, $param = '') {

    $return          = array();
    $return_is_empty = true;

    /*
     * (future) Grammer:
     * split by 'AND', then split by 'OR' and finally lookout for 'NOT'
     * 'AND' has a higher priority then 'OR'.
     * i.e.: 'Muffins AND Choc OR Strawberry' searches for all Choclate or
     *       Strawberry-Muffins.
     *
     * current status: 'AND' only.
     */

    $and = split(" AND ", $str);
    foreach ($and as $this) {

      switch ($where) {
        case 'title':
          if ($param == 1) {
            $result = get_mid_by_name("");
          } else if (is_string ($param) and !is_numeric($param) and strlen($param) == 1) {
            $result = get_mid_by_name("$param", 1);
          } else {
            $result = get_mid_by_name("$this");
          }
          break;
        case 'cat':
          $result = get_mid_by_cat($this);
          break;
        case 'ingred':
          $result = get_mid_by_ingred($this);
          break;
        case 'Source':
        case 'Recorder':
          $result = get_mid_by_meta($where, $this);
          break;
      }

      /* Intersection with an empty array is empty. So we need to catch
       * this situation first. 
       */
      if (!$return_is_empty) {
        $return = KS_array_intersect($return, $result);
      } else {
        $return = $result;
        $return_is_empty = false;
      }
    }

    /* We are done here, sort and return the result. */
    if (isset($return)) {
      uasort($return, "cmp_menu");
      return $return;
    } else {
      return false;
    }
  }


  function KS_array_intersect ($a, $b) {
    /* Compute the intersection on two arrays containing the
     * get_mid_by_*() results.
     */

    foreach ($a as $item) {
      foreach ($b as $other) {
        if ($item == $other) {
          $r[] = $item;
        }
      }
      array_shift($a);
    }
    return $r;
  }


  function is_unit ($str) {
    // Test, whether a given string is a valid MM-Unit or not
    if ($alias = is_unit_alias($str)) {
      return $alias;
    } else {
      $str = addslashes($str);
      $req = "select abbrev from EINHEITEN " .
             " where " . DB_casecomp("ABBREV", $str);
             "    or RK_ABBREV = '$str' ".
             "   and MMUSE     = 'J'";
      if (($result=DB_query($req)) and ($result->numRows() == 1)) {
        $return = $result->fetchRow(DB_FETCHMODE_ORDERED);
        $result->free();
        return $return[0];
      } else {
        $result->free();
        return false;
      }
    }
  }


  function is_unit_alias ($str) {
    // Test, whether a given string is a valid unit-alias. 
    // Return a valid MM-unit or false.

    $req = "select EINHEITEN.abbrev " .
           "  from EINHEITEN, EINHEITEN_ALIAS " .
           " where EINHEITEN.ID = EINHEITEN_ALIAS.EID " .
           "   and EINHEITEN_ALIAS.TEXT = '" . addslashes($str) . "'";
    if (($result=DB_query($req)) and ($result->numRows()==1)) {
      $unit = $result->fetchRow();
      $result->free();
      return $unit["abbrev"]; 
    } else {
      $result->free();
      return false;
    }
  }


  function get_units () {
    /* Gib Informationen zu den Einheiten aus. */

    $all = array();
    $req = "select EINHEITEN.id, " .
           "       EINHEITEN.abbrev, " . 
           "       unit_langs.text, " .
           "       EINHEITEN.faktor, ".
           "       EINHEITEN.faktor_id," .
           "       EINHEITEN.rk_abbrev, " .
           "       EINHEITEN.mmuse " .
           "  from EINHEITEN, unit_langs ".
           " where MMUSE != 'N' " .
           "   and EINHEITEN.ID = unit_langs.id " .
           "   and unit_langs.lang = '" . $GLOBALS["KS_LANG"] . "' ".
           " order by ABBREV";
    if ($result=DB_query($req)) {

      while ($unit = $result->fetchRow()) {
        $a = get_unit_aliases ($unit["abbrev"]);
        array_push ($all, array("unit"    => $unit,
                                "aliases" => $a));
      }
      $result->free();
    }
    return $all;
  }

 
  function get_unit_aliases ($id) {
    /* Get a List of defined aliases of unit-id $id */
    $a = array();
    $req_alias = "select EINHEITEN_ALIAS.text " .
                 "  from EINHEITEN_ALIAS, EINHEITEN " .
                 " where EINHEITEN_ALIAS.EID = EINHEITEN.ID " .
                 "   and " . DB_casecomp("EINHEITEN.ABBREV", $id) .
                 " order by TEXT ";

    if (!$result_alias=DB_query($req_alias)) {
      return false;
    } else {
      while ($alias = $result_alias->fetchRow(DB_FETCHMODE_ORDERED)) {
        array_push($a, $alias[0]);
      }
    }
    $result_alias->free();
    return $a;
  }
 

  /**
   * Create a list of Aliases for a given unit.
   * $unit is the MM-Style abbreviation for the unit and 
   * $alias (string) is the alias to be created.
   * returns > 0 on Success, 0 if already defined and < 0 on error.
   * @param string $unit   MM-Unit
   * @param string $alias  New alias-list
   * @return int   $result 0 if already defined, <0 on error, >0 on success
   */
  function mk_unit_alias ($unit, $alias) {
    $alias = addslashes($alias);
    $unit  = addslashes($unit);

    /* Let's start checking if that alias is already defined somewhere
     * else or even a valid unitname and stop then:
     */
    if (is_unit($alias)) {
      return 0;
    } else {
      /* Alias is undefined. That's fine, lets proceed. */

      /* What's the ID of the unit? */
      $req = "select id from EINHEITEN " .
             " where " . DB_casecomp("ABBREV", $unit);
      if ($result = DB_query($req)) {

        /* we have the ID, do the insert: */

        $id = $result->fetchRow();
        $result->free();
        $req = "insert into EINHEITEN_ALIAS values (" . $id["id"] . ", '$alias')";

        if (! $result = DB_query($req)) {

          /* Something's wrong. */
          return -2;

        } else {

          /* All is fine. Return something >0. */
          return 1;

        }
      } else {
        return -1;
      }
    }
  }


  /**
   * Convert fractions to real numbers. 
   * @param string $quant
   * @param float
   */
  function fraction_to_real ($quant) {

    $quant = preg_replace('/,/', '.', $quant);
    $quant = preg_replace('/(\d+\/\d+)/', "+\\1", $quant);
    $quant = eval("return $quant;");

    return $quant;
  }


  /**
   * Write a recipe into the database. 
   * For the layout of the database see Documentation/init_db.sql
   * @param  array $rezept Array containing the recipe
   * @return void 
   */
  function write_db ($rezept, $new_cat_flag) {

    global $db;

    $mid=$db->nextID("MENUESEQ");
    $req = "insert into MENUE values ( " .
          "  $mid, " .
          "  '" . addslashes($rezept["yield"]) . "', " .
          "  '" . addslashes($rezept["title"]) . "', " .
          "  '" . addslashes($rezept["hash"])  . "'  " .
          "  ) ";
    $result = DB_query($req);

    foreach ($rezept["zutaten"] as $z) {
      if (isset($z['ingredients'][0]['ingred'])) {
        $rid = $db->nextID("REZEPTSEQ");
        $req = "insert into REZEPT values ( " .
               "  $rid, " .
               "  '$mid', " .
               "  '" . addslashes($z["title"]) . "' " .
               " ) ";
        $result = DB_query($req);

        foreach ($z["ingredients"] as $i) {
          $zid = $db->nextID("ZUTATENSEQ");
          $req = "insert into ZUTATEN values ( " .
                 "  $zid, " .
                 "  '" . addslashes($i["quant"]) . "', " .
                 "  '" . addslashes($i["unit"])  . "', " .
                 "  '" . addslashes($i["ingred"]) ."', " .
                 "  '$rid' ".
                 " ) ";
          $result = DB_query($req);
        }
      }
    }
    $req = "insert into ANWEISUNG values ( " .
           "  '" . addslashes($rezept["anleitung"]) . "', " .
           "  '$mid' " .
           " ) ";
    $result = DB_query($req);

    foreach ($rezept["category"] as $cat) {
      $req = "select id,text from KATEGORIE where TEXT = '$cat'";
      $result = DB_query($req);
      if ($r = $result->fetchRow()) {
        $cid = $r["id"];
      } else {
        if ($new_cat_flag === true) {
          $cid = $db->nextID("KATEGORIESEQ");
          $req = "insert into KATEGORIE values ( " .
                 "  $cid, " .
                 "  '" . addslashes($cat) . "' " .
                 " ) ";
          $result = DB_query($req);
        } else $GLOBALS['notice'] .= "$cat unknown, Ignoring.\n";
      }

      $kid = $db->nextID("KATSEQ");
      $req = "insert into KAT values ( $kid,$cid,$mid)";

      $result = DB_query($req);
    }

    foreach ($rezept['meta'] as $fieldname => $fieldvalue) {
      if (!empty($fieldvalue)) {
        $meta_id = $db->nextID('menu_metaseq');

        $fieldname = addslashes ($fieldname);
        $fieldvalue = addslashes ($fieldvalue);
  
        $req = "insert into menu_meta values ( ".
               " $meta_id, ".
               " $mid, ".
               " '$fieldname', ".
               " '$fieldvalue' ".
               ")";
        $result = DB_query($req);
      }
    }

    // return the menu-id.
    return $mid;
  }


  /**
   * Contruct the menu-array 
   * @param  int   $mid Menu-ID
   * @return array
   */
  function get_menu_by_mid ($mid, $scale) {
    if (!is_numeric($mid) and !is_numeric($scale)) return -1;

    $req = "select id,portionen,titel from MENUE where ID = '$mid'";
    if ($result=DB_query($req)) {

      $r = $result->fetchRow();
      $result->free();

      return array("title"     => stripslashes($r["titel"]),
                   "yield"     => scale_alnum(stripslashes($r["portionen"]), $scale),
                   "category"  => get_category_by_mid($mid),
                   "zutaten"   => get_recipe_by_mid($mid, $scale),
                   "anleitung" => get_instructions_by_mid($mid),
                   "meta"      => get_meta_by_mid($mid));
    }
  }


  /**
   * Fetch the metadata for a recipe from the database
   *
   * @param int $mid Menu ID
   * @return array
   */
  function get_meta_by_mid($mid) {
    $meta = array();

    $req = "select fieldname, fieldvalue from menu_meta where mid = '$mid'";
    if ($result = DB_query($req)) {
      while ($r = $result->fetchRow()) {
        $meta[$r['fieldname']] = $r['fieldvalue'];
      }
      $result->free();
      return $meta;
    } else return array();
  }


  /**
   * Fetch an sub-recipe from the database by it's Menu-ID
   * @param  int   $mid Menu-ID
   * @return array
   */
  function get_recipe_by_mid ($mid, $scale) {
    $a = array();

    $req = "select id,titel from REZEPT " .
           " where MENUE_ID = '$mid' " .
           " order by ID asc" ;
    if ($result=DB_query($req)) {

      while ($r = $result->fetchRow()) {
        array_push($a, array("title" => stripslashes($r["titel"]),
                             "ingredients" => get_ingr_by_rid($r["id"], $scale)));

      }
      $result->free();
    }
    return $a;
  }


  function get_ingr_by_rid ($rid, $scale) {
    /* return an array with all the ingredients, belonging to an "Rezept" */
    $a = array();

    $req = "select id,menge,einheit,text from ZUTATEN where REZEPT_ID = '$rid' order by ID asc";
    if ($result=DB_query($req)) {

      while($r = $result->fetchRow()) {
        array_push($a, array("quant" => $scale * stripslashes($r["menge"]),
                             "unit"  => stripslashes($r["einheit"]),
                             "ingred" => stripslashes($r["text"])));

      }
      $result->free();
    }
    return $a;
  }


  function get_category_by_mid ($mid) {
    $a = array();

    $req = "select id,kategorie_id from KAT where MENUE_ID = '$mid'";
    if ($result=DB_query($req)) {

      while ($r = $result->fetchRow()) {
        $req_1 = "select id,text from KATEGORIE where ID = " .  $r["kategorie_id"];
        $res_1 = DB_query($req_1);

        $f = $res_1->fetchRow();

        array_push($a, stripslashes($f["text"]));

        $res_1->free();
      }
      $result->free();
    }
    return $a;
  }


  function get_instructions_by_mid($mid) {
    $req = "select text from ANWEISUNG where MENUE_ID = '$mid'";
    $result = DB_query($req);

    $f = $result->fetchRow();
    $result->free();

    return stripslashes($f["text"]);
  }


  /**
   * List all available categories
   *
   * @return array
   */
  function get_categories() {
    $a = array();

    $req = "select text from KATEGORIE order by TEXT" ;
    $result = DB_query($req);

    while ($c = $result->fetchRow()) {
      array_push($a, stripslashes($c["text"]));
    }
    $result->free();
    return $a;
  }


  /**
   * Get all menus with category $cat 
   *
   * @param  string $cat
   * @return array  $a   Resulting ID and Menu-title
   */
  function get_mid_by_cat ($cat) {
    $a          = array();

    $req = "select distinct MENUE.titel, MENUE.id " .
           "  from MENUE, KAT, KATEGORIE " .
           " where MENUE.ID = KAT.MENUE_ID " .
           "   and KAT.KATEGORIE_ID = KATEGORIE.ID " .
           "   and KATEGORIE.TEXT = '$cat'" ;

    $result=DB_query($req);
    while ($m = $result->fetchRow()) {
      array_push($a, array("id"    => stripslashes($m["id"]), 
                           "title" => stripslashes($m["titel"]) ));
    }
    $result->free();
    return $a;
  }


  /**
   * Get all menus with ingredients like $ingred
   *
   * @param  string $ingred
   * @return array  $a      Resulting ID and Menu-title
   */
  function get_mid_by_ingred($ingred) {
    /* Search the database for a menu containing a special ingredient
     * "ingred". 
     * Returns "0" if none found, an array of an associative arrays
     * ("ID", "PORTIONEN", "TITEL") otherwise.
     */

    $m = array();

    $req = "select distinct MENUE.id, MENUE.titel " .
           "  from MENUE, REZEPT, ZUTATEN " .
           " where MENUE.ID = REZEPT.MENUE_ID " .
           "   and REZEPT.ID = ZUTATEN.REZEPT_ID " .
           "   and " . DB_ilike("ZUTATEN.TEXT", "%" . "$ingred" ."%");

    $result = DB_query($req);
    while ($z = $result->fetchRow()) {
      array_push ($m, array("id"    => stripslashes($z["id"]),
                            "title" => stripslashes($z["titel"])) );
    }
    $result->free();
    return $m;
  }


  /**
   * Get all menus with title like $name
   *
   * @param  string $name
   * @param  int    $first_char Match the first character of the title
   * @return array  $a          Resulting ID and Menu-title
   */
  function get_mid_by_name($name, $first_char=0) {

    $a = array();
    if ($first_char==1) {
      $search = "$name%" ;
    } else {
      $search = "%$name%";
    }
    $req = "select id, titel from MENUE " .
           " where " . DB_ilike("TITEL","$search")  .
           " order by TITEL asc";
    $result = DB_query($req);

    while ($r = $result->fetchRow()) {
      array_push($a, array("id"    => stripslashes($r["id"]),
                           "title" => stripslashes($r["titel"])));
    }
    $result->free();
    return $a;
  }


  /**
   * Get all menus with metadata $fieldvalue
   *
   * @param  string $fieldname
   * @param  string $fieldvalue
   * @return array  $a          Resulting ID and Menu-title
   */
  function get_mid_by_meta($fieldname, $fieldvalue) {

    $a = array();
    $search = "%$fieldvalue%";

    $req = "select MENUE.id, MENUE.titel from MENUE, menu_meta " .
           " where MENUE.id = menu_meta.mid " .
           "   and menu_meta.fieldname = '$fieldname' " .
           "   and " . DB_ilike("menu_meta.fieldvalue", "$search")  .
           " order by TITEL asc";
    $result = DB_query($req);

    while ($r = $result->fetchRow()) {
      array_push($a, array("id"    => stripslashes($r["id"]),
                           "title" => stripslashes($r["titel"])));
    }
    $result->free();
    return $a;
  }



  /**
   * Which format can we print?
   * @param  string $wish  preferred format
   * @return string
   */
  function printable_format($wish) {
    global $LATEX, $DVIPS, $GS;

    switch ($wish) {
      case "html":
        return "html";
        break;

      case "latex":
        if ($LATEX != 'none')
          return "latex";
        else
          return "html";
        break;

      case "ps":
        if ($LATEX != 'none' and $DVIPS != 'none') {
          return "ps";
        } else {
          if ($LATEX != 'none') {
            return "latex";
          } else {
            return "html";
          }
        }
        break;

      case "pdf":
        if ($LATEX != 'none' and $DVIPS != 'none' and $GS != 'none') {
          return "pdf";
        } else {
          if ($LATEX != 'none' and $DVIPS != 'none') {
            return "ps";
          } else {
            if ($LATEX != 'none') {
              return "latex";
            } else {
              return "html";
            }
          }
        }
        break;
    }
  }


  /**
   * Check if we already have an hash for this recipe
   *
   * @param  string $hash
   * @return bool         If that hash is a dupe return a ref, false otherwise
   */
  function recipe_dupe ($hash) {
    $req = "select id, titel from MENUE " .
           " where HASH = '$hash'" ;
    $result = DB_query($req);

    if ($result->numRows() > 0) {
      /* Dupe */
      while ($r = $result->fetchRow()) {
        $a[] = array("id"    => stripslashes($r["id"]),
                     "title" => stripslashes($r["titel"]));
      }
      return $a;
    } else {
      return false;
    }
  }


  /**
   * Calculate an uniq hash for every recipe
   *
   * @param array $recipe
   * @return string $hash
   */
  function recipe_hash ($recipe) {
    $hashme = '';
    $str    = $recipe["title"] . $recipe["anleitung"];
    $str    = strtolower($str);
    $j      = strlen($str);

    for ($i = 0; $i < $j ; $i++) {
      $char = $str[$i];
      if (strpos("bcdfghklmnpqrtvwxz", $char) !== false) {
        $hashme .= $char;
      }
    }

    return md5($hashme);
  }


  /**
   * Scale every number occuring in $string by factor $scale
   *
   * @param string $string
   * @param float  $scale
   * @return string $string
   */
  function scale_alnum ($string, $scale) {
    $tok = strtok($string, " ");
    $ret = "";

    while ($tok) {
      if (is_numeric($tok))
        $tok *= $scale;
      
      $ret .= ((strlen($ret) == 0) ? '' : ' ') . $tok;
      $tok = strtok(" ");
    }

    return $ret;
  }

?>
