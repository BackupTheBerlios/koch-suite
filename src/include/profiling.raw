<?php
  /**
   * Profiling class
   *
   * $Id: profiling.raw,v 1.3 2005/01/02 02:43:31 lestinsky Exp $
   *
   * Copyright (c) 2005
   *      Michael Lestinsky. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. All advertising materials mentioning features or use of this software
   *    must display the following acknowledgement:
   *      This product includes software developed by Michael Lestinsky.
   *
   * THIS SOFTWARE IS PROVIDED BY MICHAEL LESTINSKY ``AS IS'' AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL MICHAEL LESTINSKY BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   */

  class Profiling {
    var $ObjectCreation;	// Timecounters
    var $UsedTime;
    var $Start;
    var $Stop;
    var $Halted;		// "Are we running"-flag

    /**
     * Profiling() - Constructor
     */
    function Profiling() {
      $this->ObjectCreation = $this->getmicrotime();
      $this->Start = $this->getmicrotime();
      $this->UsedTime = 0;
      $this->Halted = false;
    }

    /**
     * Go() - Run the counter.     
     */
    function Go() {
      if ($this->Halted) {
        $this->Start = $this->getmicrotime();
        $this->Halted = false;
      } else {
        // the counter is already running. Flush UsedTime and Start.
        $this->UsedTime = $this->GetTime();
        $this->Start    = $this->getmicrotime();
      }
    }

    /**
     * Halt() - Stop the timecounter temporarily
     */
    function Halt() {
      if (!$this->Halted) {
        $this->Stop = $this->getmicrotime();
        $this->UsedTime += $this->Stop - $this->Start;
        $this->Halted = true;
      } else {
        // the counter is already halted.
      }
    }

    /**
     * UsedTime() - returns the spent time.
     */
    function GetTime() {
      if (!$this->Halted) {
        return (($this->getmicrotime() - $this->Start) + $this->UsedTime);
      } else {
        return ($this->UsedTime);
      }
    }

    /**
     * GetTotalTime() - returns the time spent since creation of this object 
     */
    function GetTotalTime() {
      return ($this->getmicrotime() - $this->ObjectCreation);
    }

    /**
     * How much time did we spend since the last Go().
     */
    function GetLastRunTime() {
      if ($this->Halted) 
        return $this->Stop - $this->Start;
      else 
        return $this->getmicrotime() - $this->Start;
    }

    /**
     * @private getmicrotime() get the current time in microseconds
     * stolen from the PHP manual.
     */
    function getmicrotime(){ 
      list($usec, $sec) = explode(" ",microtime()); 
      return ((float)$usec + (float)$sec); 
    } 
  }
?>
