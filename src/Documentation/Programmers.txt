### $Id: Programmers.txt,v 1.14 2002/05/26 11:02:56 lestinsky Exp $

Programmers Documentation
=========================


0. Content
----------

  1. General notes
  2. Style
     2.1 General
     2.2 Function definitions
     2.3 HTML
  3. Datastructure
  4. "config"
     4.1. Substitutions
  5. Authentication



1. General Notes
----------------

1.1 ChangeLog

Please don't change the ChangeLog! The ChangeLog will be generated
automatically every night from the CVS commitmessages. Woe be to those who
attempt to mess with it.



2. Style
--------

2.1 General

  * Don't use <Tab>s for indentions, but rather 2 <Space>s for every
    indention level.

  * Use K&R bracestyle.

       function foobar () {
         // Something
       }

    instead of

      function foobar() 
      {
        // Something
      }

  * Use the power of linebreaks when the lines are getting long.
    I.E. align function parameters in the same row.

  * Use PHPDoc style comments (http://www.phpdoc.org) or:

  * Use C style comments. C++ style is Ok, too.
    Ok:

      /* Comment */

      /*
       * Important comment
       */

      // Another comment

    Deprecated:

      # Bad comment.

  * Use <?php something() ?> instead of <? something() ?>

2.2 Function definitions

Sort new functions alphabetically into the libraries.

Comment your functions: what does it do, what are it's arguments, what
does it return? Write this comments in PHPDoc-syntax.
(http://www.phpdoc.org). As an example it should look like the following:

  /**
   * Short description ...
   *
   * Long description ...
   * @param  string $var1 The first Value
   * @param  float  $var2 The amount of money to transfer to the programmer
   * @param  string $var3 The bankname
   * @return int    $return
   */
  function foobar ($var1, $var2, $var3 = 'Default') {

    // Do something ...
    return 42;
  }


2.3 HTML

  * The resulting HTML page must be valid. (Use http://validator.w3.org).

  * Least HTML standard: 4.0, better XHTML1.0

  * Write 7-bit clean. Use their respective HTML-entities for special
    characters.



3. Datastructure
-----------------

The central datatype, which represents the complete recipe internally, is
structured as shown below. Sorry for the german terms.

  $rezept
     |----> "title" [*]
     |----> "yield"
     |----> "category"
     |         `----> array
     |----> "zutaten"
     |         `----> array
     |                  |----> "title" [**]
     |                  `----> "ingredients"
     |                            `----> array
     |                                     |----> "quant"
     |                                     |----> "unit"
     |                                     `----> "ingred"
     |----> "anweisung"
     `----> "meta"
               |----> "Recorder"
               |----> "Date"
               `----> "Source"

[*]:  The title of the complete recipe
[**]: The title of the respective ingredients-sublist. I.e. "For the sauce".



4. "config"
-----------

The file `config' defines substitutions, which will be applied to the
sources. This replaces for example the paths to each module.

The `configure' script generates a `config.sed' from the `config', and
`make' feeds `sed' with this generated `config.sed' to "compile" every 
source-file.


4.1. Substitutions

To make a value in a source-file configuration-dependent and replaceable by
`make', use this placeholder instead:

   <%%VARIABLE%%>

And in the `config' file

   VARIABLE = Value

`make' will then perform this substitutions.



5. Authentication
-----------------

The Authentication-scheme is designed as hierarchical structure, with
different kinds of authentication-levels. The users should be classified
in this way:

 +-----------------------------------------------+
 |       Admin:                                  |
 | +------------------------------------------+  |
 | |     Moderator: (currently unavailable)   |  |
 | | +---------------------------------+      |  |
 | | |   Writer:                       |      |  |
 | | | +-------------------------+     |      |  |
 | | | | Reader:                 |     |      |  |
 | | | |  * may read recipes     |     |      |  |
 | | | +-------------------------+     |      |  |
 | | |    * may edit and write recipes |      |  |
 | | +---------------------------------+      |  |
 | |      * accept or reject recipe sumission |  |
 | |      * you can turn off moderation,      |  |
 | |        so each recipes goes into the db  |  |
 | |        without a review                  |  |
 | +------------------------------------------+  |
 |        * controls access and creates accounts |
 +-----------------------------------------------+

Every level inherits all the permissions of its sub-levels, of course.

-- 
(c) 2002 Michael Lestinsky <michael@lestinsky.de>
